package com.aptech.coursemanagementserver.controllers;

import java.net.URI;
import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.aptech.coursemanagementserver.dtos.AuthenticationRequestDto;
import com.aptech.coursemanagementserver.dtos.AuthenticationResponseDto;
import com.aptech.coursemanagementserver.dtos.RoleDto;
import com.aptech.coursemanagementserver.models.Role;
import com.aptech.coursemanagementserver.models.User;
import com.aptech.coursemanagementserver.services.UserService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class UserController {
    private final UserService userService;

    @GetMapping("/users")
    public ResponseEntity<List<User>> getUsers() {
        return ResponseEntity.ok().body(userService.getUsers());
    }

    @PostMapping("/user/save")
    public ResponseEntity<User> saveUser(@RequestBody User user) {
        URI uri = URI.create(ServletUriComponentsBuilder.fromCurrentContextPath() // localhost:8080
                .path("/user/save").toUriString()); // Create a uri to give ResponseEntity a response Uri

        return ResponseEntity.created(uri).body(userService.saveUser(user));
    }

    @PostMapping("/role/save")
    public ResponseEntity<Role> saveRole(@RequestBody Role role) {
        URI uri = URI.create(ServletUriComponentsBuilder.fromCurrentContextPath() // localhost:8080
                .path("/role/save").toUriString()); // Create a uri to give ResponseEntity a response Uri

        return ResponseEntity.created(uri).body(userService.saveRole(role));
    }

    // @PostMapping("/role/addtouser")
    // public ResponseEntity<?> addRoleToUser(@RequestBody RoleDto dto) {
    // userService.addRoleToUser(dto.getEmail(), dto.getRoleName()); // This return
    // void

    // return ResponseEntity.ok().build();
    // }

    // @PostMapping("/login")
    // public ResponseEntity<AuthenticationResponseDto> login(@RequestBody
    // AuthenticationRequestDto authenticationRequestDto){
    // return ResponseEntity.ok()
    // }
}
