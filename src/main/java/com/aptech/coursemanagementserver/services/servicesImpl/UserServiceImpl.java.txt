package com.aptech.coursemanagementserver.services.servicesImpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.aptech.coursemanagementserver.models.Role;
import com.aptech.coursemanagementserver.models.User;
import com.aptech.coursemanagementserver.repositories.RoleRepository;
import com.aptech.coursemanagementserver.repositories.UserRepository;
import com.aptech.coursemanagementserver.services.UserService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Transactional // all changes to the managed entities are saved to the database.
@Slf4j
public class UserServiceImpl implements UserService {
    @Autowired
    private final UserRepository userRepository;
    @Autowired
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    public User saveUser(User user) {
        log.info("Saving new user {} to the database", user.getUsername());
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    @Override
    public Role saveRole(Role role) {
        log.info("Saving new role {} to the database", role.name());
        return roleRepository.save(role);
    }

    // @Override
    // public void addRoleToUser(String email, String roleName) {
    // log.info("Adding role {} to user {}", roleName, email);
    // User user = userRepository.findByEmail(email).get();
    // Role role = roleRepository.findByName(roleName).get();
    // user.getRoles().add(role); // Due to @Transactional no need to use
    // repository.save()

    // }

    @Override
    public User getUser(String email) {
        log.info("Fetching user {}", email);
        return userRepository.findByEmail(email).get();
    }

    @Override
    public List<User> getUsers() {
        log.info("Fetching all users");
        return userRepository.findAll();
    }

}
